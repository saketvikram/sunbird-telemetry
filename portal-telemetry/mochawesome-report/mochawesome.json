{
  "stats": {
    "suites": 1,
    "tests": 20,
    "passes": 18,
    "pending": 0,
    "failures": 2,
    "start": "2021-02-12T02:43:49.723Z",
    "end": "2021-02-12T02:43:49.759Z",
    "duration": 36,
    "testsRegistered": 20,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bd3da427-a98b-4289-991f-83b79d57e105",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4a303de7-46c0-422c-bd58-bb02635da3bc",
          "title": "Telemetry Helper Test Cases",
          "fullFile": "/Users/saket/Documents/evisas/uu-pull-commit/sb-telemetry/test/helpers/spec/telemetryHelper.spec.js",
          "file": "/test/helpers/spec/telemetryHelper.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user spec error for without request",
              "fullTitle": "Telemetry Helper Test Cases should return user spec error for without request",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = telemetryHelper.getUserSpec();\n} catch (error) {\n  const errorResponse = new TypeError(error)\n  expect(errorResponse.name).to.eql('TypeError');\n  done();\n}",
              "err": {},
              "uuid": "a4aa5ae7-b90f-44f9-a8b1-ac1af64670f3",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user spec based on req headers",
              "fullTitle": "Telemetry Helper Test Cases should return user spec based on req headers",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.headers['user-agent'] = testData.userAgent;\nconst res = telemetryHelper.getUserSpec(req);\nexpect(res).to.be.an('object');\nexpect(res).to.haveOwnProperty('agent');\nexpect(res['agent']).to.eql('Chrome');\nexpect(res).to.haveOwnProperty('ver');\nexpect(res['ver']).to.eql('79');\nexpect(res).to.haveOwnProperty('system');\nexpect(res['system']).to.eql('Windows');\nexpect(res).to.haveOwnProperty('platform');\nexpect(res['platform']).to.eql('WebKit');\nexpect(res).to.haveOwnProperty('raw');\nexpect(res['raw']).to.eql(testData.userAgent);\ndone();",
              "err": {
                "message": "AssertionError: expected 'Blink' to deeply equal 'WebKit'",
                "estack": "AssertionError: expected 'Blink' to deeply equal 'WebKit'\n    at Context.it (test/helpers/spec/telemetryHelper.spec.js:83:32)",
                "diff": "- Blink\n+ WebKit\n"
              },
              "uuid": "f2f0e904-20fe-4ac7-a6b1-6945eb664070",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should start session start event",
              "fullTitle": "Telemetry Helper Test Cases should start session start event",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.headers['user-agent'] = testData.userAgent;\nreq['session'] = {\n  userId: '2217bd20-47e7-11ea-8c77-b55095b87aaf',\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC'],\n  save: () => { return true; }\n};\ntelemetryHelper.logSessionStart(req, function () {\n  expect(spy.mockTelemetryStart).to.have.been.called();\n  let _startData = {\n    edata:\n      {\n        type: 'click',\n        mode: 'mode',\n        duration: 1000,\n        pageid: 'profile',\n        uaspec:\n          {\n            agent: 'Chrome',\n            ver: '79',\n            system: 'Windows',\n            platform: 'WebKit',\n            raw: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79 Safari/537.36'\n          }\n      },\n    context:\n      {\n        channel: 'channel',\n        env: 'user',\n        did: undefined,\n        sid: undefined,\n        rollup: { l1: 'ORG', l2: 'PUBLIC', l3: 'channel' }\n      },\n    actor: { id: '2217bd20-47e7-11ea-8c77-b55095b87aaf', type: 'user' },\n    tags: ['channel']\n  };\n  expect(spy.mockTelemetryStart).to.have.been.called.with(_startData);\n  done();\n});",
              "err": {
                "message": "AssertionError: expected { Spy 'object.start', 1 call }\n(data) => { return data; } to have been called with [ Array(1) ]",
                "estack": "AssertionError: expected { Spy 'object.start', 1 call }\n(data) => { return data; } to have been called with [ Array(1) ]\n    at /Users/saket/Documents/evisas/uu-pull-commit/sb-telemetry/test/helpers/spec/telemetryHelper.spec.js:127:62\n    at Object.logSessionStart (telemetryHelper.js:63:5)\n    at Context.it (test/helpers/spec/telemetryHelper.spec.js:98:21)",
                "diff": null
              },
              "uuid": "d41e286c-b401-4f2e-9a47-92581de36b48",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should start session end event",
              "fullTitle": "Telemetry Helper Test Cases should start session end event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq['sessionID'] = 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0';\nreq['session'] = {\n  userId: '2217bd20-47e7-11ea-8c77-b55095b87aaf',\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC'],\n  deviceId: testData.deviceId\n};\ntelemetryHelper.logSessionEnd(req);\nexpect(spy.mockTelemetryEnd).to.have.been.called();\nlet _endData = {\n  edata:\n  {\n    type: 'click',\n    mode: 'mode',\n    duration: 1000,\n    pageid: 'profile',\n    summary: 'logout'\n  },\n  context:\n  {\n    channel: 'channel',\n    env: 'user',\n    did: 'f0bb2c64c266047b72a794afdcee92',\n    sid: 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0',\n    rollup: { l1: 'ORG', l2: 'PUBLIC' }\n  },\n  actor: { id: '2217bd20-47e7-11ea-8c77-b55095b87aaf', type: 'user' },\n  tags: ['channel']\n};\nexpect(spy.mockTelemetryEnd).to.have.been.called.with(_endData);\ndone();",
              "err": {},
              "uuid": "3b0d8213-758b-4f20-8652-6fdb10f175c9",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate SSO start event",
              "fullTitle": "Telemetry Helper Test Cases should generate SSO start event",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq['sessionID'] = 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0';\nreq['session'] = {\n  userId: '2217bd20-47e7-11ea-8c77-b55095b87aaf',\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC'],\n  deviceId: testData.deviceId\n};\nreq['query']['token'] = testData.deviceId;\ntelemetryHelper.logSSOStartEvent(req);\nexpect(spy.mockTelemetryStart).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "1eee73f1-5f38-4507-b103-739f49e226ff",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate SSO end event",
              "fullTitle": "Telemetry Helper Test Cases should generate SSO end event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq['session'] = {\n  rootOrghashTagId: 'channel'\n};\nreq['query']['token'] = testData.deviceId;\ntelemetryHelper.logSSOEndEvent(req);\nexpect(spy.mockTelemetryEnd).to.have.been.called();\nlet _endData = {\n  edata:\n  {\n    type: 'click',\n    mode: 'mode',\n    duration: 1000,\n    pageid: 'profile',\n    summary: 'logout'\n  },\n  actor: { id: 'f0bb2c64c266047b72a794afdcee92', type: 'user' },\n  tags: ['channel']\n};\nexpect(spy.mockTelemetryEnd).to.have.been.called.with(_endData);\ndone();",
              "err": {},
              "uuid": "ba5b2a82-3275-49b0-ad91-e8c845648076",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return params data for log event",
              "fullTitle": "Telemetry Helper Test Cases should return params data for log event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = telemetryHelper.getParamsData(testData.options, testData.statusCode, testData.resp, testData.uri);\nexpect(res).to.be.an('array');\nexpect(res[0]).to.haveOwnProperty('title');\nexpect(res[1]).to.haveOwnProperty('category');\nexpect(res[2]).to.haveOwnProperty('url');\nexpect(res[3]).to.haveOwnProperty('duration');\nexpect(res[4]).to.haveOwnProperty('status');\nexpect(res[5]).to.haveOwnProperty('protocol');\nexpect(res[6]).to.haveOwnProperty('method');\nexpect(res[7]).to.haveOwnProperty('req');\nexpect(res[8]).to.haveOwnProperty('rid');\nexpect(res[9]).to.haveOwnProperty('size');\ndone();",
              "err": {},
              "uuid": "da0f03ca-fa7b-44e7-a3ec-a9764d7a9a13",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate log for api call event",
              "fullTitle": "Telemetry Helper Test Cases should generate log for api call event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.id = '001';\nreq.uri = testData.uri;\nreq.resp = testData.resp;\nreq.type = 'POST';\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.options = testData.options;\nreq.statusCode = testData.statusCode;\nreq['reqObj'] = {\n  'session': {\n    rootOrghashTagId: 'channel',\n    orgs: ['ORG', 'PUBLIC']\n  },\n  sessionID: 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0'\n};\ntelemetryHelper.logAPICallEvent(req);\nexpect(spy.mockTelemetryLog).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "ca22057c-624c-474b-a88d-05d0727c9049",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate keyclock grant log event",
              "fullTitle": "Telemetry Helper Test Cases should generate keyclock grant log event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.success = true;\nreq['reqObj'] = {\n  'session': {\n    rootOrghashTagId: 'channel',\n    orgs: ['ORG', 'PUBLIC']\n  },\n  sessionID: 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0'\n};\ntelemetryHelper.logGrantLogEvent(req);\nexpect(spy.mockTelemetryLog).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "7c6fb8eb-cc3a-4037-b634-ffce3662d682",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log API access event",
              "fullTitle": "Telemetry Helper Test Cases should log API access event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.id = '001';\nreq.uri = testData.uri;\nreq.resp = testData.resp;\nreq.type = 'POST';\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.options = testData.options;\nreq.statusCode = testData.statusCode;\nreq['reqObj'] = {\n  'session': {\n    rootOrghashTagId: 'channel',\n    orgs: ['ORG', 'PUBLIC']\n  },\n  sessionID: 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0'\n};\ntelemetryHelper.logAPIAccessEvent(req);\nexpect(spy.mockTelemetryLog).to.have.been.called();\nexpect(spy.mockTelemetryRollUpData).to.have.been.called.with([ 'ORG', 'PUBLIC', 'channel' ]);\ndone();",
              "err": {},
              "uuid": "4f5a4a4a-68fc-4a83-a5f2-a56c8f6dac2f",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log api error event",
              "fullTitle": "Telemetry Helper Test Cases should log api error event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.id = '001';\nreq.uri = testData.uri;\nreq.resp = testData.resp;\nreq.type = 'POST';\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.options = testData.options;\nreq.statusCode = testData.statusCode;\nreq['reqObj'] = {\n  'session': {\n    rootOrghashTagId: 'channel',\n    orgs: ['ORG', 'PUBLIC']\n  },\n  sessionID: 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0'\n};\ntelemetryHelper.logAPIErrorEvent(req);\nexpect(spy.mockTelemetryLog).to.have.been.called();\nexpect(spy.mockTelemetryGetActorData).to.have.been.called.with(req.userId, 'user');\ndone();",
              "err": {},
              "uuid": "9cacc827-813e-4465-bde6-8c72fa0aa9b9",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log api error event - logApiErrorEventV2",
              "fullTitle": "Telemetry Helper Test Cases should log api error event - logApiErrorEventV2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.id = '001';\nreq.uri = testData.uri;\nreq.resp = testData.resp;\nreq.type = 'POST';\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.options = testData.options;\nreq.statusCode = testData.statusCode;\nreq['session'] = {\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC']\n};\nconst options = {\n  edata: {\n    err: null,\n    errtype: null,\n    stacktrace: null\n  },\n  context: {\n    channel: null,\n    env: null,\n    cdata: null,\n    rollup: null,\n    did: null\n  }\n};\ntelemetryHelper.logApiErrorEventV2(req, options);\nexpect(spy.mockTelemetryError).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "3701d3f9-dafd-4832-8505-4457e4163b8f",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log audit event",
              "fullTitle": "Telemetry Helper Test Cases should log audit event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.uri = testData.uri;\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq.sessionID = 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0';\nreq['session'] = {\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC']\n};\nconst options = {\n  edata: {\n    props: null,\n    state: null,\n    prevstate: null\n  },\n  context: {\n    channel: null,\n    env: null,\n    cdata: null,\n    rollup: null,\n    did: null,\n    sid: null\n  }\n};\ntelemetryHelper.logAuditEvent(req, options);\nexpect(spy.mockTelemetryAudit).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "4f328a38-ff0a-40e7-b5ec-f5e021211235",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log impression event",
              "fullTitle": "Telemetry Helper Test Cases should log impression event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.uri = testData.uri;\nreq.userId = '2217bd20-47e7-11ea-8c77-b55095b87aaf';\nreq['session'] = {\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC']\n};\nconst options = {\n  edata: {\n    type: null,\n    subtype: null,\n    pageid: null,\n    uri: testData.uri,\n    visits: 12345\n  },\n  context: {\n    channel: null,\n    env: null,\n    cdata: null,\n    rollup: null,\n    did: null,\n    sid: null\n  }\n};\ntelemetryHelper.logImpressionEvent(req, options);\nexpect(spy.mockTelemetryImpression).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "fa2c64ea-cde9-437b-a0c0-cfd42f3f7e08",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log session event",
              "fullTitle": "Telemetry Helper Test Cases should log session event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nconst res = generic.getResponseObject();\nreq['session'] = {\n  sessionEvents: [],\n  save: () => { return true; }\n};\nreq.body['event'] = '{\"eid\":\"INTERACT\",\"ets\":1580900354165,\"ver\":\"3.0\"}';\ntelemetryHelper.logSessionEvents(req, res);\ndone();",
              "err": {},
              "uuid": "00a074e5-50a6-4aeb-84bf-db2e0c1981bd",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get actor data for telemetry - for userId in session",
              "fullTitle": "Telemetry Helper Test Cases should get actor data for telemetry - for userId in session",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq['session'] = {\n  userId: '2217bd20-47e7-11ea-8c77-b55095b87aaf'\n};\nconst _response = telemetryHelper.getTelemetryActorData(req);\nexpect(_response).to.be.an('object');\nexpect(_response).to.haveOwnProperty('id');\nexpect(_response).to.haveOwnProperty('type');\nexpect(_response['type']).to.eql('user');\ndone();",
              "err": {},
              "uuid": "c00e6a76-4685-4033-8330-502e149737bb",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get actor data for telemetry - for userId in headers",
              "fullTitle": "Telemetry Helper Test Cases should get actor data for telemetry - for userId in headers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nreq.headers['x-consumer-id'] = mockEnv.default_userid;\nreq.headers['x-consumer-username'] = mockEnv.default_username;\nconst _response = telemetryHelper.getTelemetryActorData(req);\nexpect(_response).to.be.an('object');\nexpect(_response).to.haveOwnProperty('id');\nexpect(_response).to.haveOwnProperty('type');\nexpect(_response['type']).to.eql('public');\ndone();",
              "err": {},
              "uuid": "b45e0eaf-9e83-43e7-98a2-7f0850d923a9",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate telemetry for proxy api's - Learner Service",
              "fullTitle": "Telemetry Helper Test Cases should generate telemetry for proxy api's - Learner Service",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nconst res = generic.getResponseObject();\nconst next = () => { };\ntelemetryHelper.generateTelemetryForLearnerService(req, res, next);\nexpect(req).to.haveOwnProperty('telemetryEnv');\ndone();",
              "err": {},
              "uuid": "b92369d3-b32a-4038-b270-940458c58ca6",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate telemetry for proxy api's - Content Service",
              "fullTitle": "Telemetry Helper Test Cases should generate telemetry for proxy api's - Content Service",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody();\nconst res = generic.getResponseObject();\nconst next = () => { };\ntelemetryHelper.generateTelemetryForContentService(req, res, next);\nexpect(req).to.haveOwnProperty('telemetryEnv');\ndone();",
              "err": {},
              "uuid": "0a62e256-daa3-4d47-8ae4-991e1a184918",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate telemetry for proxy",
              "fullTitle": "Telemetry Helper Test Cases should generate telemetry for proxy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = generic.constructReqBody({\n  headers: {\n    'x-device-id': testData.deviceId\n  }\n});\nconst res = generic.getResponseObject();\nconst next = () => { };\nreq['session'] = {\n  rootOrghashTagId: 'channel',\n  orgs: ['ORG', 'PUBLIC']\n};\nreq.sessionID = 'dK0-14e-apyYA86Yolmc.fQyOhLpLaZmLJvaRaeae0';\ntelemetryHelper.generateTelemetryForProxy(req, res, next);\nexpect(spy.mockTelemetryLog).to.have.been.called();\ndone();",
              "err": {},
              "uuid": "4ad1c5cb-2e87-4427-a1bf-06752bc9fdeb",
              "parentUUID": "4a303de7-46c0-422c-bd58-bb02635da3bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4aa5ae7-b90f-44f9-a8b1-ac1af64670f3",
            "3b0d8213-758b-4f20-8652-6fdb10f175c9",
            "1eee73f1-5f38-4507-b103-739f49e226ff",
            "ba5b2a82-3275-49b0-ad91-e8c845648076",
            "da0f03ca-fa7b-44e7-a3ec-a9764d7a9a13",
            "ca22057c-624c-474b-a88d-05d0727c9049",
            "7c6fb8eb-cc3a-4037-b634-ffce3662d682",
            "4f5a4a4a-68fc-4a83-a5f2-a56c8f6dac2f",
            "9cacc827-813e-4465-bde6-8c72fa0aa9b9",
            "3701d3f9-dafd-4832-8505-4457e4163b8f",
            "4f328a38-ff0a-40e7-b5ec-f5e021211235",
            "fa2c64ea-cde9-437b-a0c0-cfd42f3f7e08",
            "00a074e5-50a6-4aeb-84bf-db2e0c1981bd",
            "c00e6a76-4685-4033-8330-502e149737bb",
            "b45e0eaf-9e83-43e7-98a2-7f0850d923a9",
            "b92369d3-b32a-4038-b270-940458c58ca6",
            "0a62e256-daa3-4d47-8ae4-991e1a184918",
            "4ad1c5cb-2e87-4427-a1bf-06752bc9fdeb"
          ],
          "failures": [
            "f2f0e904-20fe-4ac7-a6b1-6945eb664070",
            "d41e286c-b401-4f2e-9a47-92581de36b48"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}